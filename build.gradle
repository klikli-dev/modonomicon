// SPDX-FileCopyrightText: 2022 klikli-dev
//
// SPDX-License-Identifier: MIT

plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply from: 'https://raw.githubusercontent.com/SizableShrimp/ForgeUpdatesRemapper/main/remapper.gradle'

if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = "${mc_version}-${mod_version}"
}

group = "com.klikli_dev"
archivesBaseName = "modonomicon"

// see https://github.com/mezz/JustEnoughItems/blob/1.17/build.gradle
sourceSets {
    api {
        //no resources for api
        resources.srcDirs = []
    }
    main {
        resources {
            srcDir 'src/generated/resources'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    library
    shade.extendsFrom library
    implementation.extendsFrom shade
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

minecraft {

    mappings channel: mapping_channel, version: mapping_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            args += "--username=Modonomicon"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Fix for patchouli mixin crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modonomicon {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Fix for patchouli mixin crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modonomicon {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //Fix for patchouli mixin crash
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'modonomicon', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modonomicon {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "KliKli Maven Mirror"
        url = "https://klikli-dev.github.io/maven"
    }
    maven {
        name = "Patchouli Maven"
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = "Progwm16 maven - JEI"
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    //Jei
    //TODO: renable once update
//    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}")
//    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge-api:${jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${jei_mc_version}-forge:${jei_version}")

    //commonmark
    library "org.commonmark:commonmark:${commonmark_version}"
    library "org.commonmark:commonmark-ext-gfm-strikethrough:${commonmark_version}"
    library "org.commonmark:commonmark-ext-ins:${commonmark_version}"

    //Patchouli API
    //TODO: renable once update
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_mc_version}-${patchouli_version}:api")

    //for some tests we use occultism + deps
//    runtimeOnly fg.deobf("curse.maven:occultism-361026:4029677") //1.19.2-1.45.4
//    runtimeOnly fg.deobf("curse.maven:curios-309927:3924518") //1.19.2-5.1.1
//    runtimeOnly fg.deobf("curse.maven:geckolib-388172:4017013") //1.19-3.1.22
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_mc_version}-${patchouli_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output
    from sourceSets.api.output
    archiveClassifier = "slim"
    manifest {
        attributes([
                "Specification-Title": "Modonomicon",
                "Specification-Vendor": "Kli Kli",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Kli Kli",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    from sourceSets.main.output
    from sourceSets.api.output
    archiveClassifier = ""
    configurations = [project.configurations.shade]
    relocate 'org.commonmark', "${project.group}.relocated.commonmark"
    finalizedBy 'reobfShadowJar'
}

artifacts {
    shadowJar
}

reobf {
    shadowJar {}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate {finalizedBy('reobfJar') }
}

build.dependsOn tasks.apiJar


publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifact jar //no need for slim jar
            artifact shadowJar
            artifact apiJar
            artifact sourcesJar

            pom {
                name = 'Modonomicon'
                description = 'Data-driven minecraft in-game documentation with progress visualization.'
                url = 'https://github.com/klikli-dev/modonomicon'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/klikli-dev/modonomicon/version/1.19/LICENSES/MIT.txt'
                    }
                }
                scm {
                    connection = 'scm:git:ssh:git@github.com:klikli-dev/modonomicon.git'
                    url = 'https://github.com/klikli-dev/modonomicon'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://repo.repsy.io/mvn/klikli-dev/mods"
            credentials {
                username = System.getenv('MAVEN_USER')
                password = System.getenv('MAVEN_PASS')
            }
        }
    }
}

//increase max errors from 100 to 2000
afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources.setDuplicatesStrategy(DuplicatesStrategy.WARN)
sourcesJar.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)